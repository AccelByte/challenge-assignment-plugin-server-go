// Copyright (c) 2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.18.1
// source: assignment_function.proto

package assignmentFunction

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ChallengeRotation int32

const (
	ChallengeRotation_DAILY   ChallengeRotation = 0
	ChallengeRotation_WEEKLY  ChallengeRotation = 1
	ChallengeRotation_MONTHLY ChallengeRotation = 2
	ChallengeRotation_NONE    ChallengeRotation = 3
)

// Enum value maps for ChallengeRotation.
var (
	ChallengeRotation_name = map[int32]string{
		0: "DAILY",
		1: "WEEKLY",
		2: "MONTHLY",
		3: "NONE",
	}
	ChallengeRotation_value = map[string]int32{
		"DAILY":   0,
		"WEEKLY":  1,
		"MONTHLY": 2,
		"NONE":    3,
	}
)

func (x ChallengeRotation) Enum() *ChallengeRotation {
	p := new(ChallengeRotation)
	*p = x
	return p
}

func (x ChallengeRotation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChallengeRotation) Descriptor() protoreflect.EnumDescriptor {
	return file_assignment_function_proto_enumTypes[0].Descriptor()
}

func (ChallengeRotation) Type() protoreflect.EnumType {
	return &file_assignment_function_proto_enumTypes[0]
}

func (x ChallengeRotation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChallengeRotation.Descriptor instead.
func (ChallengeRotation) EnumDescriptor() ([]byte, []int) {
	return file_assignment_function_proto_rawDescGZIP(), []int{0}
}

type AssignmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string     `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	UserId    string     `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	Goals     []*Goal    `protobuf:"bytes,3,rep,name=goals,proto3" json:"goals,omitempty"`
	Challenge *Challenge `protobuf:"bytes,4,opt,name=challenge,proto3" json:"challenge,omitempty"`
}

func (x *AssignmentRequest) Reset() {
	*x = AssignmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_assignment_function_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignmentRequest) ProtoMessage() {}

func (x *AssignmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_assignment_function_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignmentRequest.ProtoReflect.Descriptor instead.
func (*AssignmentRequest) Descriptor() ([]byte, []int) {
	return file_assignment_function_proto_rawDescGZIP(), []int{0}
}

func (x *AssignmentRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *AssignmentRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AssignmentRequest) GetGoals() []*Goal {
	if x != nil {
		return x.Goals
	}
	return nil
}

func (x *AssignmentRequest) GetChallenge() *Challenge {
	if x != nil {
		return x.Challenge
	}
	return nil
}

type AssignmentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace     string  `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	UserId        string  `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	AssignedGoals []*Goal `protobuf:"bytes,3,rep,name=assignedGoals,proto3" json:"assignedGoals,omitempty"`
}

func (x *AssignmentResponse) Reset() {
	*x = AssignmentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_assignment_function_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignmentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignmentResponse) ProtoMessage() {}

func (x *AssignmentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_assignment_function_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignmentResponse.ProtoReflect.Descriptor instead.
func (*AssignmentResponse) Descriptor() ([]byte, []int) {
	return file_assignment_function_proto_rawDescGZIP(), []int{1}
}

func (x *AssignmentResponse) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *AssignmentResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AssignmentResponse) GetAssignedGoals() []*Goal {
	if x != nil {
		return x.AssignedGoals
	}
	return nil
}

type Challenge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code                   string                 `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Name                   string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	StartDate              *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=startDate,proto3" json:"startDate,omitempty"`
	EndDate                *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=endDate,proto3" json:"endDate,omitempty"`
	EndAfter               int32                  `protobuf:"varint,5,opt,name=endAfter,proto3" json:"endAfter,omitempty"`
	RepeatAfter            int32                  `protobuf:"varint,6,opt,name=repeatAfter,proto3" json:"repeatAfter,omitempty"`
	Rotation               ChallengeRotation      `protobuf:"varint,7,opt,name=rotation,proto3,enum=accelbyte.challenge.assignmentFunction.ChallengeRotation" json:"rotation,omitempty"`
	ActiveGoalsPerRotation int32                  `protobuf:"varint,8,opt,name=activeGoalsPerRotation,proto3" json:"activeGoalsPerRotation,omitempty"`
	ResetConfig            *ResetConfig           `protobuf:"bytes,9,opt,name=resetConfig,proto3" json:"resetConfig,omitempty"`
}

func (x *Challenge) Reset() {
	*x = Challenge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_assignment_function_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Challenge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Challenge) ProtoMessage() {}

func (x *Challenge) ProtoReflect() protoreflect.Message {
	mi := &file_assignment_function_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Challenge.ProtoReflect.Descriptor instead.
func (*Challenge) Descriptor() ([]byte, []int) {
	return file_assignment_function_proto_rawDescGZIP(), []int{2}
}

func (x *Challenge) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Challenge) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Challenge) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *Challenge) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *Challenge) GetEndAfter() int32 {
	if x != nil {
		return x.EndAfter
	}
	return 0
}

func (x *Challenge) GetRepeatAfter() int32 {
	if x != nil {
		return x.RepeatAfter
	}
	return 0
}

func (x *Challenge) GetRotation() ChallengeRotation {
	if x != nil {
		return x.Rotation
	}
	return ChallengeRotation_DAILY
}

func (x *Challenge) GetActiveGoalsPerRotation() int32 {
	if x != nil {
		return x.ActiveGoalsPerRotation
	}
	return 0
}

func (x *Challenge) GetResetConfig() *ResetConfig {
	if x != nil {
		return x.ResetConfig
	}
	return nil
}

type ResetConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResetTime string `protobuf:"bytes,1,opt,name=resetTime,proto3" json:"resetTime,omitempty"`
	ResetDay  int32  `protobuf:"varint,2,opt,name=resetDay,proto3" json:"resetDay,omitempty"`
	ResetDate int32  `protobuf:"varint,3,opt,name=resetDate,proto3" json:"resetDate,omitempty"`
}

func (x *ResetConfig) Reset() {
	*x = ResetConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_assignment_function_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetConfig) ProtoMessage() {}

func (x *ResetConfig) ProtoReflect() protoreflect.Message {
	mi := &file_assignment_function_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetConfig.ProtoReflect.Descriptor instead.
func (*ResetConfig) Descriptor() ([]byte, []int) {
	return file_assignment_function_proto_rawDescGZIP(), []int{3}
}

func (x *ResetConfig) GetResetTime() string {
	if x != nil {
		return x.ResetTime
	}
	return ""
}

func (x *ResetConfig) GetResetDay() int32 {
	if x != nil {
		return x.ResetDay
	}
	return 0
}

func (x *ResetConfig) GetResetDate() int32 {
	if x != nil {
		return x.ResetDate
	}
	return 0
}

type Goal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code          string                 `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	ChallengeCode string                 `protobuf:"bytes,2,opt,name=challengeCode,proto3" json:"challengeCode,omitempty"`
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	IsActive      bool                   `protobuf:"varint,4,opt,name=isActive,proto3" json:"isActive,omitempty"`
	Tags          []*Tag                 `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty"`
	Requirements  []*Requirement         `protobuf:"bytes,6,rep,name=requirements,proto3" json:"requirements,omitempty"`
	Rewards       []*Reward              `protobuf:"bytes,7,rep,name=rewards,proto3" json:"rewards,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
}

func (x *Goal) Reset() {
	*x = Goal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_assignment_function_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Goal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Goal) ProtoMessage() {}

func (x *Goal) ProtoReflect() protoreflect.Message {
	mi := &file_assignment_function_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Goal.ProtoReflect.Descriptor instead.
func (*Goal) Descriptor() ([]byte, []int) {
	return file_assignment_function_proto_rawDescGZIP(), []int{4}
}

func (x *Goal) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Goal) GetChallengeCode() string {
	if x != nil {
		return x.ChallengeCode
	}
	return ""
}

func (x *Goal) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Goal) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *Goal) GetTags() []*Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Goal) GetRequirements() []*Requirement {
	if x != nil {
		return x.Requirements
	}
	return nil
}

func (x *Goal) GetRewards() []*Reward {
	if x != nil {
		return x.Rewards
	}
	return nil
}

func (x *Goal) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Goal) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type Requirement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operator   string       `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator,omitempty"`
	Predicates []*Predicate `protobuf:"bytes,2,rep,name=predicates,proto3" json:"predicates,omitempty"`
}

func (x *Requirement) Reset() {
	*x = Requirement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_assignment_function_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Requirement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Requirement) ProtoMessage() {}

func (x *Requirement) ProtoReflect() protoreflect.Message {
	mi := &file_assignment_function_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Requirement.ProtoReflect.Descriptor instead.
func (*Requirement) Descriptor() ([]byte, []int) {
	return file_assignment_function_proto_rawDescGZIP(), []int{5}
}

func (x *Requirement) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *Requirement) GetPredicates() []*Predicate {
	if x != nil {
		return x.Predicates
	}
	return nil
}

type Predicate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParameterName string  `protobuf:"bytes,1,opt,name=parameterName,proto3" json:"parameterName,omitempty"`
	ParameterType string  `protobuf:"bytes,2,opt,name=parameterType,proto3" json:"parameterType,omitempty"`
	Matcher       string  `protobuf:"bytes,3,opt,name=matcher,proto3" json:"matcher,omitempty"`
	TargetValue   float32 `protobuf:"fixed32,4,opt,name=targetValue,proto3" json:"targetValue,omitempty"`
	StatCycleId   *string `protobuf:"bytes,5,opt,name=statCycleId,proto3,oneof" json:"statCycleId,omitempty"`
	Id            string  `protobuf:"bytes,6,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *Predicate) Reset() {
	*x = Predicate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_assignment_function_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Predicate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Predicate) ProtoMessage() {}

func (x *Predicate) ProtoReflect() protoreflect.Message {
	mi := &file_assignment_function_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Predicate.ProtoReflect.Descriptor instead.
func (*Predicate) Descriptor() ([]byte, []int) {
	return file_assignment_function_proto_rawDescGZIP(), []int{6}
}

func (x *Predicate) GetParameterName() string {
	if x != nil {
		return x.ParameterName
	}
	return ""
}

func (x *Predicate) GetParameterType() string {
	if x != nil {
		return x.ParameterType
	}
	return ""
}

func (x *Predicate) GetMatcher() string {
	if x != nil {
		return x.Matcher
	}
	return ""
}

func (x *Predicate) GetTargetValue() float32 {
	if x != nil {
		return x.TargetValue
	}
	return 0
}

func (x *Predicate) GetStatCycleId() string {
	if x != nil && x.StatCycleId != nil {
		return *x.StatCycleId
	}
	return ""
}

func (x *Predicate) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type Reward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     string  `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	ItemId   string  `protobuf:"bytes,2,opt,name=itemId,proto3" json:"itemId,omitempty"`
	ItemName string  `protobuf:"bytes,3,opt,name=itemName,proto3" json:"itemName,omitempty"`
	Quantity float32 `protobuf:"fixed32,4,opt,name=quantity,proto3" json:"quantity,omitempty"`
}

func (x *Reward) Reset() {
	*x = Reward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_assignment_function_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Reward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reward) ProtoMessage() {}

func (x *Reward) ProtoReflect() protoreflect.Message {
	mi := &file_assignment_function_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reward.ProtoReflect.Descriptor instead.
func (*Reward) Descriptor() ([]byte, []int) {
	return file_assignment_function_proto_rawDescGZIP(), []int{7}
}

func (x *Reward) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Reward) GetItemId() string {
	if x != nil {
		return x.ItemId
	}
	return ""
}

func (x *Reward) GetItemName() string {
	if x != nil {
		return x.ItemName
	}
	return ""
}

func (x *Reward) GetQuantity() float32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

type Goals struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Goals []*Goal `protobuf:"bytes,1,rep,name=goals,proto3" json:"goals,omitempty"`
}

func (x *Goals) Reset() {
	*x = Goals{}
	if protoimpl.UnsafeEnabled {
		mi := &file_assignment_function_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Goals) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Goals) ProtoMessage() {}

func (x *Goals) ProtoReflect() protoreflect.Message {
	mi := &file_assignment_function_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Goals.ProtoReflect.Descriptor instead.
func (*Goals) Descriptor() ([]byte, []int) {
	return file_assignment_function_proto_rawDescGZIP(), []int{8}
}

func (x *Goals) GetGoals() []*Goal {
	if x != nil {
		return x.Goals
	}
	return nil
}

type Tag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Tag) Reset() {
	*x = Tag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_assignment_function_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tag) ProtoMessage() {}

func (x *Tag) ProtoReflect() protoreflect.Message {
	mi := &file_assignment_function_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tag.ProtoReflect.Descriptor instead.
func (*Tag) Descriptor() ([]byte, []int) {
	return file_assignment_function_proto_rawDescGZIP(), []int{9}
}

func (x *Tag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

var File_assignment_function_proto protoreflect.FileDescriptor

var file_assignment_function_proto_rawDesc = []byte{
	0x0a, 0x19, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x26, 0x61, 0x63, 0x63,
	0x65, 0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x2e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xde, 0x01, 0x0a, 0x11, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x42, 0x0a, 0x05, 0x67, 0x6f, 0x61, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x6f, 0x61, 0x6c, 0x52, 0x05, 0x67,
	0x6f, 0x61, 0x6c, 0x73, 0x12, 0x4f, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x62,
	0x79, 0x74, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x61, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x22, 0x9e, 0x01, 0x0a, 0x12, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x52, 0x0a, 0x0d, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x47, 0x6f,
	0x61, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x63, 0x63, 0x65,
	0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x2e,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x47, 0x6f, 0x61, 0x6c, 0x52, 0x0d, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x47, 0x6f, 0x61, 0x6c, 0x73, 0x22, 0xc7, 0x03, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x65, 0x6e, 0x64, 0x41, 0x66, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x65, 0x6e, 0x64, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72,
	0x65, 0x70, 0x65, 0x61, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x55, 0x0a, 0x08, 0x72, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x61,
	0x63, 0x63, 0x65, 0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x36, 0x0a, 0x16, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x47, 0x6f, 0x61, 0x6c, 0x73,
	0x50, 0x65, 0x72, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x16, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x47, 0x6f, 0x61, 0x6c, 0x73, 0x50, 0x65,
	0x72, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x0b, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x22, 0x65, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x1c, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x73, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x73, 0x65, 0x74, 0x44, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x72, 0x65, 0x73, 0x65, 0x74, 0x44, 0x61, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x44, 0x61, 0x74, 0x65, 0x22, 0xc8, 0x03, 0x0a, 0x04, 0x47, 0x6f, 0x61, 0x6c,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x3f, 0x0a, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x6c,
	0x62, 0x79, 0x74, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x61,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x57, 0x0a, 0x0c, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x63, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x48, 0x0a, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x62, 0x79, 0x74,
	0x65, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x61, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x38,
	0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x22, 0x7c, 0x0a, 0x0b, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x51, 0x0a,
	0x0a, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x63, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73,
	0x22, 0xda, 0x01, 0x0a, 0x09, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x25, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x43, 0x79,
	0x63, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x73,
	0x74, 0x61, 0x74, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x6c, 0x0a,
	0x06, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69,
	0x74, 0x65, 0x6d, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x74, 0x65,
	0x6d, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x4b, 0x0a, 0x05, 0x47,
	0x6f, 0x61, 0x6c, 0x73, 0x12, 0x42, 0x0a, 0x05, 0x67, 0x6f, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e,
	0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x6f, 0x61,
	0x6c, 0x52, 0x05, 0x67, 0x6f, 0x61, 0x6c, 0x73, 0x22, 0x19, 0x0a, 0x03, 0x54, 0x61, 0x67, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x2a, 0x41, 0x0a, 0x11, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x41, 0x49, 0x4c,
	0x59, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x57, 0x45, 0x45, 0x4b, 0x4c, 0x59, 0x10, 0x01, 0x12,
	0x0b, 0x0a, 0x07, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x4c, 0x59, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x03, 0x32, 0x98, 0x01, 0x0a, 0x12, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x81, 0x01,
	0x0a, 0x06, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x12, 0x39, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x6c,
	0x62, 0x79, 0x74, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x61,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e,
	0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x42, 0x83, 0x01, 0x0a, 0x2a, 0x6e, 0x65, 0x74, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x62,
	0x79, 0x74, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x61, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x01, 0x5a, 0x2a, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x6e, 0x65,
	0x74, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x2f, 0x61, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0xaa, 0x02,
	0x26, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_assignment_function_proto_rawDescOnce sync.Once
	file_assignment_function_proto_rawDescData = file_assignment_function_proto_rawDesc
)

func file_assignment_function_proto_rawDescGZIP() []byte {
	file_assignment_function_proto_rawDescOnce.Do(func() {
		file_assignment_function_proto_rawDescData = protoimpl.X.CompressGZIP(file_assignment_function_proto_rawDescData)
	})
	return file_assignment_function_proto_rawDescData
}

var file_assignment_function_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_assignment_function_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_assignment_function_proto_goTypes = []interface{}{
	(ChallengeRotation)(0),        // 0: accelbyte.challenge.assignmentFunction.ChallengeRotation
	(*AssignmentRequest)(nil),     // 1: accelbyte.challenge.assignmentFunction.AssignmentRequest
	(*AssignmentResponse)(nil),    // 2: accelbyte.challenge.assignmentFunction.AssignmentResponse
	(*Challenge)(nil),             // 3: accelbyte.challenge.assignmentFunction.Challenge
	(*ResetConfig)(nil),           // 4: accelbyte.challenge.assignmentFunction.ResetConfig
	(*Goal)(nil),                  // 5: accelbyte.challenge.assignmentFunction.Goal
	(*Requirement)(nil),           // 6: accelbyte.challenge.assignmentFunction.Requirement
	(*Predicate)(nil),             // 7: accelbyte.challenge.assignmentFunction.Predicate
	(*Reward)(nil),                // 8: accelbyte.challenge.assignmentFunction.Reward
	(*Goals)(nil),                 // 9: accelbyte.challenge.assignmentFunction.Goals
	(*Tag)(nil),                   // 10: accelbyte.challenge.assignmentFunction.Tag
	(*timestamppb.Timestamp)(nil), // 11: google.protobuf.Timestamp
}
var file_assignment_function_proto_depIdxs = []int32{
	5,  // 0: accelbyte.challenge.assignmentFunction.AssignmentRequest.goals:type_name -> accelbyte.challenge.assignmentFunction.Goal
	3,  // 1: accelbyte.challenge.assignmentFunction.AssignmentRequest.challenge:type_name -> accelbyte.challenge.assignmentFunction.Challenge
	5,  // 2: accelbyte.challenge.assignmentFunction.AssignmentResponse.assignedGoals:type_name -> accelbyte.challenge.assignmentFunction.Goal
	11, // 3: accelbyte.challenge.assignmentFunction.Challenge.startDate:type_name -> google.protobuf.Timestamp
	11, // 4: accelbyte.challenge.assignmentFunction.Challenge.endDate:type_name -> google.protobuf.Timestamp
	0,  // 5: accelbyte.challenge.assignmentFunction.Challenge.rotation:type_name -> accelbyte.challenge.assignmentFunction.ChallengeRotation
	4,  // 6: accelbyte.challenge.assignmentFunction.Challenge.resetConfig:type_name -> accelbyte.challenge.assignmentFunction.ResetConfig
	10, // 7: accelbyte.challenge.assignmentFunction.Goal.tags:type_name -> accelbyte.challenge.assignmentFunction.Tag
	6,  // 8: accelbyte.challenge.assignmentFunction.Goal.requirements:type_name -> accelbyte.challenge.assignmentFunction.Requirement
	8,  // 9: accelbyte.challenge.assignmentFunction.Goal.rewards:type_name -> accelbyte.challenge.assignmentFunction.Reward
	11, // 10: accelbyte.challenge.assignmentFunction.Goal.createdAt:type_name -> google.protobuf.Timestamp
	11, // 11: accelbyte.challenge.assignmentFunction.Goal.updatedAt:type_name -> google.protobuf.Timestamp
	7,  // 12: accelbyte.challenge.assignmentFunction.Requirement.predicates:type_name -> accelbyte.challenge.assignmentFunction.Predicate
	5,  // 13: accelbyte.challenge.assignmentFunction.Goals.goals:type_name -> accelbyte.challenge.assignmentFunction.Goal
	1,  // 14: accelbyte.challenge.assignmentFunction.AssignmentFunction.Assign:input_type -> accelbyte.challenge.assignmentFunction.AssignmentRequest
	2,  // 15: accelbyte.challenge.assignmentFunction.AssignmentFunction.Assign:output_type -> accelbyte.challenge.assignmentFunction.AssignmentResponse
	15, // [15:16] is the sub-list for method output_type
	14, // [14:15] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_assignment_function_proto_init() }
func file_assignment_function_proto_init() {
	if File_assignment_function_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_assignment_function_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_assignment_function_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignmentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_assignment_function_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Challenge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_assignment_function_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_assignment_function_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Goal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_assignment_function_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Requirement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_assignment_function_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Predicate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_assignment_function_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Reward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_assignment_function_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Goals); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_assignment_function_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_assignment_function_proto_msgTypes[6].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_assignment_function_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_assignment_function_proto_goTypes,
		DependencyIndexes: file_assignment_function_proto_depIdxs,
		EnumInfos:         file_assignment_function_proto_enumTypes,
		MessageInfos:      file_assignment_function_proto_msgTypes,
	}.Build()
	File_assignment_function_proto = out.File
	file_assignment_function_proto_rawDesc = nil
	file_assignment_function_proto_goTypes = nil
	file_assignment_function_proto_depIdxs = nil
}
